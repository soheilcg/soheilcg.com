{"version":3,"sources":["webpack:///./src/templates/tag.module.scss","webpack:///./src/components/Sections/PostFeed/PostFeed.module.scss","webpack:///./src/templates/tag.tsx","webpack:///./src/components/Sections/PostFeed/PostFeed.tsx","webpack:///./src/components/Sections/PostCard/PostCard.tsx","webpack:///./node_modules/react-intl/lib/src/components/message.js","webpack:///./src/components/Sections/PostCard/PostCard.module.scss"],"names":["module","exports","TagHero","data","formatMessage","useIntlHelper","className","fluidImg","tag","image","childImageSharp","fluid","styles","archiveHeaderContent","id","description","values","num","posts","nodes","length","TagTemplate","template","header","PostFeed","isHome","postFeed","map","post","i","key","options","year","month","day","PostCard","intl","isFeatured","frontmatter","featured","postCard","postCardLarge","postCardImageLink","to","category","fields","slug","postCardImage","alt","title","postCardContent","postCardContentLink","postCardHeader","postCardPrimaryTag","undefined","tags","postCardTitle","postCardExcerpt","desc","excerpt","postCardMeta","postCardBylineContent","postCardBylineDate","dateTime","date","formatDate","shallowEquals","FormattedMessage","_super","apply","this","arguments","prototype","shouldComponentUpdate","nextProps","_a","props","otherProps","nextValues","nextOtherProps","render","_this","Consumer","textComponent","Text","_b","defaultMessage","children","_c","tagName","Component","ignoreTag","Array","isArray","displayName"],"mappings":"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","file":"component---src-templates-tag-tsx-ea47f9552685c4b45643.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"archiveHeaderContent\":\"g_z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"h_B\",\"postFeed\":\"h_C\"};","import * as React from 'react';\nimport { graphql } from 'gatsby';\nimport { Tag as TagData } from '~src/templates/__generated__/Tag';\nimport Layout from '~src/components/Layout/Layout';\nimport useIntlHelper from '~src/i18n/helpers/useIntlHelper';\nimport HeaderBackground from '~src/components/Layout/Header/HeaderBackground';\nimport { PostFeed } from '~src/components/Sections/PostFeed/PostFeed';\nimport styles from './tag.module.scss';\nimport { FormattedMessage } from 'react-intl';\nconst TagHero = ({ data }) => {\n\tconst { formatMessage } = useIntlHelper();\n\treturn (\n\t\t<header className=\"site-archive-header\">\n\t\t\t<HeaderBackground fluidImg={data.tag.image.childImageSharp.fluid}>\n\t\t\t\t<div className={`\"inner \" + ${styles.archiveHeaderContent}`}>\n\t\t\t\t\t<h1 className=\"site-title\">{formatMessage(`tags.${data.tag.id}.title`)}</h1>\n\t\t\t\t\t<h2 className=\"site-description\">\n\t\t\t\t\t\t{(data.tag.description && formatMessage(`tags.${data.tag.id}.desc`)) || (\n\t\t\t\t\t\t\t<FormattedMessage id=\"posts.collection\" values={{ num: data.posts.nodes.length }} />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</h2>\n\t\t\t\t</div>\n\t\t\t</HeaderBackground>\n\t\t</header>\n\t);\n};\nconst TagTemplate: React.FC<{ data: TagData }> = ({ data }) => {\n\treturn (\n\t\t<>\n\t\t\t<Layout template=\"tag\" data={data} header={<TagHero data={data} />}>\n\t\t\t\t<div className=\"inner\">\n\t\t\t\t\t<PostFeed data={data} />\n\t\t\t\t</div>\n\t\t\t</Layout>\n\t\t</>\n\t);\n};\n\nexport default TagTemplate;\n\nexport const TagTemplateQuery = graphql`\n\tquery Tag($id: String!, $locale: String!) {\n\t\ttag: tagsYaml(id: { eq: $id }) {\n\t\t\tdescription\n\t\t\timage {\n\t\t\t\tchildImageSharp {\n\t\t\t\t\tfluid {\n\t\t\t\t\t\t...GatsbyImageSharpFluid_withWebp_tracedSVG\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tid\n\t\t}\n\t\tposts: allMdx(filter: { fields: { locale: { eq: $locale } }, frontmatter: { tags: { in: [$id] } } }) {\n\t\t\tnodes {\n\t\t\t\tfields {\n\t\t\t\t\tslug\n\t\t\t\t}\n\t\t\t\tfrontmatter {\n\t\t\t\t\tdate(formatString: \"DD MMMM YYYY\")\n\t\t\t\t\ttitle\n\t\t\t\t\ttags\n\t\t\t\t\tcategory\n\t\t\t\t\timage {\n\t\t\t\t\t\tchildImageSharp {\n\t\t\t\t\t\t\tfluid {\n\t\t\t\t\t\t\t\t...GatsbyImageSharpFluid_withWebp_tracedSVG\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\texcerpt(pruneLength: 200, truncate: true)\n\t\t\t\ttimeToRead\n\t\t\t}\n\t\t}\n\t}\n`;\n","import * as React from 'react';\nimport { Index } from '~src/pages/__generated__/Index';\nimport { NotFound } from '~src/pages/__generated__/NotFound';\nimport { Author } from '~src/templates/__generated__/Author';\nimport { Tag } from '~src/templates/__generated__/Tag';\nimport { Post } from '~src/types/Post';\nimport PostCard from '../PostCard/PostCard';\nimport styles from './PostFeed.module.scss';\n\nexport const PostFeed: React.FC<{ data: Index | NotFound | Author | Tag; isHome?: boolean }> = ({ data, isHome }) => {\n\treturn (\n\t\t<div className={styles.posts}>\n\t\t\t<div className={styles.postFeed}>\n\t\t\t\t{(data.posts.nodes as Post[]).map((post: Post, i: number) => {\n\t\t\t\t\treturn <PostCard post={post} i={i} key={i} isHome={isHome} />;\n\t\t\t\t})}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n","import * as React from 'react';\n//import { Index_posts_nodes as Post } from '~src/pages/__generated__/Index';\nimport Link from '~src/i18n/components/Link';\nimport ImgSharp from '~src/components/utils/ImgSharp/ImgSharp';\nimport styles from './PostCard.module.scss';\nimport useIntlHelper from '~src/i18n/helpers/useIntlHelper';\nimport { Post } from '~src/types/Post';\n\nconst options = {\n\tyear: 'numeric',\n\tmonth: 'short',\n\tday: 'numeric',\n};\n\nconst PostCard: React.FC<{\n\tpost: Post;\n\ti?: number;\n\tisHome?: boolean;\n}> = ({ post, i, isHome }) => {\n\tconst { intl } = useIntlHelper();\n\tconst isFeatured = post.frontmatter.featured;\n\treturn (\n\t\t<article className={styles.postCard + ` ` + ((isHome && isFeatured && 0 === i % 6 && styles.postCardLarge) || ``)}>\n\t\t\t<Link className={styles.postCardImageLink} to={`/${post.frontmatter.category}/${post.fields.slug}`}>\n\t\t\t\t<ImgSharp\n\t\t\t\t\tclassName={styles.postCardImage}\n\t\t\t\t\talt={post.frontmatter.title}\n\t\t\t\t\t/* \tsizes=\"(max-width: 1000px) 400px, 700px\" */\n\t\t\t\t\tfluid={post.frontmatter.image.childImageSharp.fluid}\n\t\t\t\t/>\n\t\t\t</Link>\n\t\t\t<div className={styles.postCardContent}>\n\t\t\t\t<Link className={styles.postCardContentLink} to={`/${post.frontmatter.category}/${post.fields.slug}`}>\n\t\t\t\t\t<header className={styles.postCardHeader}>\n\t\t\t\t\t\t<div className={styles.postCardPrimaryTag}>\n\t\t\t\t\t\t\t{post.frontmatter.tags[0] !== undefined &&\n\t\t\t\t\t\t\t\tintl.formatMessage({\n\t\t\t\t\t\t\t\t\tid: `tags.${post.frontmatter.tags[0]}.title`,\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<h2 className={styles.postCardTitle}>{post.frontmatter.title}</h2>\n\t\t\t\t\t</header>\n\t\t\t\t\t<section className={styles.postCardExcerpt}>\n\t\t\t\t\t\t<p>{post.frontmatter.desc ? post.frontmatter.desc : post.excerpt}</p>\n\t\t\t\t\t</section>\n\t\t\t\t</Link>\n\t\t\t\t<footer className={styles.postCardMeta}>\n\t\t\t\t\t<div className={styles.postCardBylineContent}>\n\t\t\t\t\t\t<span className={styles.postCardBylineDate}>\n\t\t\t\t\t\t\t<time dateTime={post.frontmatter.date}>{intl.formatDate(post.frontmatter.date, options)}</time>{' '}\n\t\t\t\t\t\t\t{/* \t\t\t\t\t\t\t<span className=\"bull\">•</span> {intl.formatNumber(post.timeToRead)}{' '}\n\t\t\t\t\t\t\t{intl.formatMessage({ id: 'posts.timeToRead' })} */}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t</footer>\n\t\t\t</div>\n\t\t</article>\n\t);\n};\n\nexport default PostCard;\n","/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport { __extends, __rest, __spreadArray } from \"tslib\";\nimport * as React from 'react';\nimport { Context } from './injectIntl';\nimport { invariantIntlContext } from '../utils';\nimport * as shallowEquals_ from 'shallow-equal/objects';\nvar shallowEquals = shallowEquals_.default || shallowEquals_;\n\nvar FormattedMessage =\n/** @class */\nfunction (_super) {\n  __extends(FormattedMessage, _super);\n\n  function FormattedMessage() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  FormattedMessage.prototype.shouldComponentUpdate = function (nextProps) {\n    var _a = this.props,\n        values = _a.values,\n        otherProps = __rest(_a, [\"values\"]);\n\n    var nextValues = nextProps.values,\n        nextOtherProps = __rest(nextProps, [\"values\"]);\n\n    return !shallowEquals(nextValues, values) || !shallowEquals(otherProps, nextOtherProps);\n  };\n\n  FormattedMessage.prototype.render = function () {\n    var _this = this;\n\n    return React.createElement(Context.Consumer, null, function (intl) {\n      invariantIntlContext(intl);\n      var formatMessage = intl.formatMessage,\n          _a = intl.textComponent,\n          Text = _a === void 0 ? React.Fragment : _a;\n      var _b = _this.props,\n          id = _b.id,\n          description = _b.description,\n          defaultMessage = _b.defaultMessage,\n          values = _b.values,\n          children = _b.children,\n          _c = _b.tagName,\n          Component = _c === void 0 ? Text : _c,\n          ignoreTag = _b.ignoreTag;\n      var descriptor = {\n        id: id,\n        description: description,\n        defaultMessage: defaultMessage\n      };\n      var nodes = formatMessage(descriptor, values, {\n        ignoreTag: ignoreTag\n      });\n\n      if (!Array.isArray(nodes)) {\n        nodes = [nodes];\n      }\n\n      if (typeof children === 'function') {\n        return children(nodes);\n      }\n\n      if (Component) {\n        // Needs to use `createElement()` instead of JSX, otherwise React will\n        // warn about a missing `key` prop with rich-text message formatting.\n        return React.createElement.apply(React, __spreadArray([Component, null], nodes));\n      }\n\n      return nodes;\n    });\n  };\n\n  FormattedMessage.displayName = 'FormattedMessage';\n  return FormattedMessage;\n}(React.Component);\n\nexport default FormattedMessage;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postCard\":\"y_h\",\"postCardImageLink\":\"y_bV\",\"postCardImage\":\"y_K\",\"postCardContentLink\":\"y_bW\",\"postCardHeader\":\"y_bX\",\"noImage\":\"y_bk\",\"postCardPrimaryTag\":\"y_H\",\"postCardTitle\":\"y_J\",\"postCardContent\":\"y_bY\",\"postCardExcerpt\":\"y_L\",\"postCardMeta\":\"y_bZ\",\"postCardBylineContent\":\"y_M\",\"postCardBylineDate\":\"y_b0\",\"bull\":\"y_x\",\"postCardLarge\":\"y_b1\"};"],"sourceRoot":""}